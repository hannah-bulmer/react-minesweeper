{"version":3,"sources":["serviceWorker.js","components/Cell.js","components/Board.js","components/Game.js","index.js"],"names":["Boolean","window","location","hostname","match","Cell","props","onClick","e","x","y","onCellClick","state","clicked","isClicked","value","cellValue","saveValue","this","flag","classNames","className","React","Component","Board","clearAllBlanks","board","width","height","neighbours","isMine","setState","shiftKey","setFlag","clickMine","checkIfWon","lost","flagCounter","forEach","row","cell","mineCounter","won","countNeighbours","Array","map","i","rows","z","j","push","createCell","createCells","Math","floor","random","placeMines","key","renderCellRows","renderBoard","renderYouLose","renderYouWon","Game","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.146939e4.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\n\nclass Cell extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      clicked: this.props.isClicked,\n      value: this.props.cellValue,\n      saveValue: this.props.cellValue,\n    };\n  }\n\n  onClick = (e) => {\n    const { x, y, onCellClick } = this.props;\n    onCellClick(e,x,y);\n  }\n  \n  render() {\n    let { value, clicked } = this.state;\n    const { isClicked, flag } = this.props;\n    if (flag) value = '🚩'\n    else if (clicked || isClicked) {}\n    else value = '';\n    const classNames = isClicked || clicked ? \"clicked square\" : \"square\";\n    return (\n      <button className={classNames} onClick={this.onClick}>\n        {value}\n      </button>\n    );\n  }\n}\n\nexport default Cell;\n","/* eslint-disable */\nimport React from 'react'\nimport Cell from './Cell';\nimport { throwStatement } from '@babel/types';\n\nclass Board extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      board: this.countNeighbours(),\n      lost: false,\n      won: false,\n    }\n  }\n\n  createCell() {\n    const cell = {\n      value: '',\n      isMine: '',\n      neighbours: 0,\n      flag: false,\n      isClicked: false,\n    }\n    return cell;\n  }\n  \n  createCells() {\n    const { height, width } = this.props;\n    let board = [];\n    [...Array(height)].map((x, i) => {\n      let rows = [];\n      [...Array(width)].map((z, j) => rows.push(this.createCell()));\n      board.push(rows);\n    });\n    return board;\n  }\n\n  placeMines() {\n    let { mineCounter, width, height } = this.props;\n    const board = this.createCells();\n    while (mineCounter > 0) {\n      const x = Math.floor(Math.random() * height);\n      const y = Math.floor(Math.random() * width);\n      if (!board[x][y].isMine) {\n        board[x][y].isMine = true;\n        board[x][y].value = '💣';\n        mineCounter -= 1;\n      }\n    }\n    return board;\n  }\n\n  countNeighbours() {\n    let { width, height } = this.props;\n    height = height - 1;\n    width = width - 1;\n    const board = this.placeMines();\n    board.forEach((row, x) => {\n      row.forEach((cell, y) => {\n        // check left right up down\n        let neighbours = 0;\n        if (x > 0 && board[x-1][y].isMine) neighbours += 1; // left\n        if (x < height && board[x+1][y].isMine) neighbours += 1; // right\n        if (y < width && board[x][y+1].isMine) neighbours += 1; // up\n        if (y > 0 && board[x][y-1].isMine) neighbours += 1; // down\n        if (x > 0 && y > 0 && board[x-1][y-1].isMine) neighbours += 1; // TL\n        if (x < height && y > 0 && board[x+1][y-1].isMine) neighbours += 1; // TR\n        if (x > 0 && y < width && board[x-1][y+1].isMine) neighbours += 1; // BL\n        if (x < height && y < width && board[x+1][y+1].isMine) neighbours += 1; // BR\n        board[x][y].neighbours = neighbours;\n        if (!board[x][y].isMine) board[x][y].value = (neighbours === 0) ? '' : neighbours;\n      })\n    })\n    return board;\n  }\n\n  clearAllBlanks = (x, y) => {\n    const { board } = this.state;\n    let {width, height } = this.props;\n    width -= 1;\n    height -= 1;\n    if (board[x][y].neighbours === 0 && !board[x][y].isClicked && !board[x][y].flag) {\n      board[x][y].isClicked = true;\n      if (x > 0) this.clearAllBlanks(x-1, y);\n      if (x < height) this.clearAllBlanks(x+1, y);\n      if (y > 0) this.clearAllBlanks(x, y-1);\n      if (y < width) this.clearAllBlanks(x, y+1);\n      this.setState({ board })\n    } else if (!board[x][y].isMine && !board[x][y].flag) {\n      board[x][y].isClicked = true;\n      this.setState({ board })\n    }\n  }\n\n  onClick = (e, x, y) => {\n    const { board } = this.state;\n    if (e.shiftKey) {\n      if (!board[x][y].isClicked) this.setFlag(x,y);\n    } else {\n      if (board[x][y].flag) return;\n      else if (board[x][y].isMine) this.clickMine();\n      else if (board[x][y].neighbours === 0) this.clearAllBlanks(x, y);\n      board[x][y].isClicked = true;\n      this.setState({ board });\n    }\n  }\n\n  setFlag = (x, y) => {\n    const { board } = this.state;\n    board[x][y].flag = !board[x][y].flag;\n    this.setState({ board })\n    this.checkIfWon();\n  }\n \n  clickMine = () => {\n    this.setState({ lost: true })\n  }\n\n  checkIfWon = () => {\n    const { board } = this.state;\n    let flagCounter = 0;\n    board.forEach((row) => {\n      row.forEach((cell) => {\n        if (cell.isMine && cell.flag) flagCounter ++;\n      })\n    })\n    if (flagCounter === this.props.mineCounter) this.setState({ won: true })\n  }\n\n  renderYouLose() {\n    return(\n      <div>YOU LOSE</div>\n    )\n  }\n\n  renderYouWon() {\n    return (\n      <div>YOU WON</div>\n    )\n  }\n  \n  renderCellRows(row, x) {\n    const { width } = this.props;\n    return (\n      [...Array(width)].map((j, i) => {\n        return <Cell\n          cellValue={row[i].value}\n          neighbours={row[i].neighbours}\n          key={`${row[i]}${i}`}\n          flag={row[i].flag}\n          isMine={row[i].isMine}\n          onCellClick={this.onClick}\n          isClicked={row[i].isClicked}\n          x={x}\n          y={i}\n        />\n      })\n    )\n  }\n  \n  renderBoard() {\n    const { height } = this.props;\n    const { board } = this.state;\n    return (\n      [...Array(height)].map((x, i) => {\n        return (\n          <div className=\"board-row\" key={`${board[i]}${i}`}>\n            {this.renderCellRows(board[i], i)}\n          </div>\n        )\n      })\n    )\n  }\n\n  render() {\n    return (\n      <div className=\"boardBackground\">\n        {this.renderBoard()}\n        {this.state.lost && this.renderYouLose()}\n        {this.state.won && this.renderYouWon()}\n      </div>\n    )\n  }\n}\n\nexport default Board;\n","/* eslint-disable react/prefer-stateless-function */\nimport React from 'react';\nimport Board from './Board';\nimport '../styles/Game.scss';\n\nclass Game extends React.Component {\n  render() {\n    const { height, width, mineCounter } = this.props;\n    return (\n      <div className=\"mineSweeper\">\n        MINESWEEPER\n        <Board className=\"game\" height={height} width={width} mineCounter={mineCounter} />\n      </div>\n    );\n  }\n}\n\nexport default Game;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport * as serviceWorker from './serviceWorker';\nimport Game from './components/Game'\n\nReactDOM.render(<Game height={10} width={20} mineCounter={20} />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}