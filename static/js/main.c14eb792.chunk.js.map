{"version":3,"sources":["serviceWorker.js","components/Cell.js","components/Board.js","components/Game.js","index.js"],"names":["Boolean","window","location","hostname","match","Cell","props","onClick","e","state","clicked","value","saveValue","neighbours","x","y","isMine","shiftKey","clickMine","setFlag","clearAllBlanks","setState","isClicked","cellValue","this","classNames","className","React","Component","Board","board","width","height","console","log","flag","checkIfWon","lost","flagCounter","forEach","row","cell","mineCounter","won","countNeighbours","Array","map","i","rows","z","j","push","createCell","createCells","Math","floor","random","placeMines","key","renderCellRows","renderBoard","renderYouLose","renderYouWon","Game","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c14eb792.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\n\nclass Cell extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      clicked: this.props.isClicked,\n      value: this.props.cellValue,\n      saveValue: this.props.cellValue,\n    };\n  }\n\n  onClick = (e) => {\n    let { clicked, value, saveValue } = this.state;\n    const { neighbours, x, y } = this.props;\n\n    if (this.props.isMine && !e.shiftKey) return this.props.clickMine();\n\n    if (value === '🚩' || !clicked) {\n      if (value === '🚩') value = saveValue;\n      if (e.shiftKey) {\n        value = '🚩'\n        this.props.setFlag(x, y);\n      } else {\n        clicked = true;\n        if (neighbours === 0) this.props.clearAllBlanks(x, y);\n      }\n      this.setState({\n        clicked,\n        value,\n      });\n    }\n  }\n  \n  render() {\n    let { value, clicked } = this.state;\n    const { isClicked } = this.props;\n    value = clicked || value ==='🚩' ? value : '';\n    const classNames = isClicked || clicked ? \"clicked square\" : \"square\";\n    return (\n      <button className={classNames} onClick={this.onClick}>\n        {value}\n      </button>\n    );\n  }\n}\n\nexport default Cell;\n","/* eslint-disable */\nimport React from 'react'\nimport Cell from './Cell';\n\nclass Board extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      board: this.countNeighbours(),\n      lost: false,\n      won: false,\n    }\n  }\n\n  createCell() {\n    const cell = {\n      value: '',\n      isMine: '',\n      neighbours: 0,\n      flag: false,\n      isClicked: false,\n    }\n    return cell;\n  }\n  \n  createCells() {\n    const { height, width } = this.props;\n    let board = [];\n    [...Array(height)].map((x, i) => {\n      let rows = [];\n      [...Array(width)].map((z, j) => rows.push(this.createCell()));\n      board.push(rows);\n    });\n    return board;\n  }\n\n  placeMines() {\n    let { mineCounter, width, height } = this.props;\n    const board = this.createCells();\n    while (mineCounter > 0) {\n      const x = Math.floor(Math.random() * height);\n      const y = Math.floor(Math.random() * width);\n      if (!board[x][y].isMine) {\n        board[x][y].isMine = true;\n        board[x][y].value = '💣';\n        mineCounter -= 1;\n      }\n    }\n    return board;\n  }\n\n  countNeighbours() {\n    let { width, height } = this.props;\n    height = height - 1;\n    width = width - 1;\n    const board = this.placeMines();\n    board.forEach((row, x) => {\n      row.forEach((cell, y) => {\n        // check left right up down\n        let neighbours = 0;\n        if (x > 0 && board[x-1][y].isMine) neighbours += 1; // left\n        if (x < height && board[x+1][y].isMine) neighbours += 1; // right\n        if (y < width && board[x][y+1].isMine) neighbours += 1; // up\n        if (y > 0 && board[x][y-1].isMine) neighbours += 1; // down\n        if (x > 0 && y > 0 && board[x-1][y-1].isMine) neighbours += 1; // TL\n        if (x < height && y > 0 && board[x+1][y-1].isMine) neighbours += 1; // TR\n        if (x > 0 && y < width && board[x-1][y+1].isMine) neighbours += 1; // BL\n        if (x < height && y < width && board[x+1][y+1].isMine) neighbours += 1; // BR\n        board[x][y].neighbours = neighbours;\n        if (!board[x][y].isMine) board[x][y].value = (neighbours === 0) ? '' : neighbours;\n      })\n    })\n    return board;\n  }\n\n  clearAllBlanks = (x, y) => {\n    const { board } = this.state;\n    let {width, height } = this.props;\n    width -= 1;\n    height -= 1;\n    if (board[x][y].neighbours === 0 && !board[x][y].isClicked) {\n      board[x][y].isClicked = true;\n      if (x > 0) this.clearAllBlanks(x-1, y);\n      if (x < width) this.clearAllBlanks(x+1, y);\n      if (y > 0) this.clearAllBlanks(x, y-1);\n      if (y < height) this.clearAllBlanks(x, y+1);\n      this.setState({ board })\n    }\n  }\n\n  setFlag = (x, y) => {\n    const { board } = this.state;\n    console.log(\"set\")\n    board[x][y].flag = true;\n    this.setState({ board })\n    this.checkIfWon();\n  }\n \n  clickMine = () => {\n    this.setState({ lost: true })\n  }\n\n  checkIfWon = () => {\n    const { board } = this.state;\n    let flagCounter = 0;\n    board.forEach((row) => {\n      row.forEach((cell) => {\n        if (cell.isMine && cell.flag) flagCounter ++;\n      })\n    })\n    console.log(flagCounter)\n    if (flagCounter === this.props.mineCounter) this.setState({ won: true })\n  }\n\n  renderYouLose() {\n    return(\n      <div>YOU LOSE</div>\n    )\n  }\n\n  renderYouWon() {\n    return (\n      <div>YOU WON</div>\n    )\n  }\n  \n  renderCellRows(row, x) {\n    const { width } = this.props;\n    return (\n      [...Array(width)].map((j, i) => {\n        return <Cell\n          cellValue={row[i].value}\n          neighbours={row[i].neighbours}\n          key={`${row[i]}${i}`}\n          isMine={row[i].isMine}\n          clearAllBlanks={this.clearAllBlanks}\n          clickMine={this.clickMine}\n          isClicked={row[i].isClicked}\n          setFlag={this.setFlag}\n          x={x}\n          y={i}\n        />\n      })\n    )\n  }\n  \n  renderBoard() {\n    const { height } = this.props;\n    const { board } = this.state;\n    return (\n      [...Array(height)].map((x, i) => {\n        return (\n          <div className=\"board-row\" key={`${board[i]}${i}`}>\n            {this.renderCellRows(board[i], i)}\n          </div>\n        )\n      })\n    )\n  }\n\n  render() {\n    return (\n      <div>\n        {this.renderBoard()}\n        {this.state.lost && this.renderYouLose()}\n        {this.state.won && this.renderYouWon()}\n      </div>\n    )\n  }\n}\n\nexport default Board;\n","/* eslint-disable react/prefer-stateless-function */\nimport React from 'react';\nimport Board from './Board';\nimport '../styles/Game.scss';\n\nclass Game extends React.Component {\n  render() {\n    const { height, width, mineCounter } = this.props;\n    return (\n      <Board className=\"game\" height={height} width={width} mineCounter={mineCounter} />\n    );\n  }\n}\n\nexport default Game;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport * as serviceWorker from './serviceWorker';\nimport Game from './components/Game'\n\nReactDOM.render(<Game height={10} width={10} mineCounter={10} />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}